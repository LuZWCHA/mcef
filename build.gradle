buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'


version = "1.12.2-1.20"
group = "net.montoyo.mcef"
archivesBaseName = "mcef"
def enableSigning = false

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    clientJvmArgs += "-Dfml.coreMods.load=net.montoyo.mcef.LoadingPlugin"
    mappings = "snapshot_20171003"
}

//MCEF: update Let's Encrypt root certificate before building
task importLetsEncryptCertificate {
    def target = new File(sourceSets.main.resources.srcDirs.first(), "assets/mcef/r3.crt")
    if(target.exists())
        target.delete()

    new URL("http://montoyo.net/ShareX/root.crt")
            .withInputStream { i -> target.withOutputStream { it << i }}
    println "updated let's encrypt root certificate"
}

processResources.dependsOn importLetsEncryptCertificate

//MCEF: Generate unobfuscated JAR that can be added to the 'libs' folder
task apiJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'api'
}

//Generate coremod JAR
import groovy.swing.SwingBuilder

task coremodJar(type: Jar) {

    classifier = 'coremod'
    manifest {
        manifest.attributes([
                "FMLCorePluginContainsFMLMod": 'true',
                "FMLCorePlugin": "net.montoyo.mcef.LoadingPlugin",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        ])
    }
    doLast {
        if(enableSigning) {
            def keyAlias = ''
            def keyFile = ''
            def keyPswd = ''
            def dstDir = new File(coremodJar.destinationDir, 'signed')
            dstDir.mkdirs()

            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Signing details required',
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        pack: true,
                        show: true) {
                    vbox {
                        label(text: 'Key File:')
                        input1 = textField()
                        label(text: 'Key Alias:')
                        input2 = textField()
                        label(text: 'Key Password:')
                        input3 = passwordField()
                        button(defaultButton: true, text: 'Sign', actionPerformed: {
                            keyFile = input1.text
                            keyAlias = input2.text
                            keyPswd = new String(input3.password)
                            dispose()
                        })
                    }
                }
            }

            ant.signjar(
                    jar: coremodJar.archivePath.absolutePath,
                    destDir: dstDir.absolutePath,
                    alias: keyAlias,
                    storetype: 'jks',
                    keystore: keyFile,
                    storepass: keyPswd,
                    verbose: true,
                    preservelastmodified: 'true'
            )
        }
    }
}

reobf {
    coremodJar { mappingType = 'SEARGE' }
}

jar {
    File signedCoremod
    if(enableSigning)
        signedCoremod = new File(new File(coremodJar.destinationDir, 'signed'), coremodJar.archivePath.name)
    else
        signedCoremod = coremodJar.archivePath

    from(signedCoremod.absolutePath) {
        include '*'
    }

    manifest {
        attributes 'ContainedDeps': coremodJar.archivePath.name
        attributes 'Main-Class': 'net.montoyo.mcef.setup.SetupUI'
    }

    dependsOn reobfCoremodJar
}

artifacts {
    archives apiJar
}

dependencies {
    provided('org.spongepowered:mixin:0.8') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, "mixins.mcef.refmap.json"
}