buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://crystal.app.lss233.com/repositories/minecraft"
        }
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'


version = "1.20"
group = "net.montoyo.mcef"
archivesBaseName = "mcef-${version}"
def enableSigning = false

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    clientJvmArgs += "-Dfml.coreMods.load=net.montoyo.mcef.LoadingPlugin"
    mappings = "stable_39"
}

//MCEF: update Let's Encrypt root certificate before building
task importLetsEncryptCertificate {
    def target = new File(sourceSets.main.resources.srcDirs.first(), "assets/mcef/r3.crt")
    if(target.exists())
        target.delete()

    new URL("http://montoyo.net/ShareX/root.crt")
            .withInputStream { i -> target.withOutputStream { it << i }}
    println "updated let's encrypt root certificate"
}

processResources.dependsOn importLetsEncryptCertificate

dependencies {
    implementation sourceSets.api.output
    provided('org.spongepowered:mixin:0.8') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

task apiJar(type: Jar) {
    classifier = 'api'

    from sourceSets.api.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
    from sourceSets.api.output
}

jar {
    manifest {
        manifest.attributes([
                "FMLCorePluginContainsFMLMod": 'true',
                "FMLCorePlugin"              : "com.nowandfuture.translation.LoadingPlugin",
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker"
        ])
    }

    from configurations.provided.asFileTree.files.collect {
        zipTree(it)
    }
}

artifacts {
    archives apiJar
    archives sourcesJar
    archives deobfJar
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, "mixins.mcef.refmap.json"
}